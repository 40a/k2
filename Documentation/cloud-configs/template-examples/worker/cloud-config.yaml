#cloud-config

---
write_files:
  - path: /etc/ssl/ca-key.pem
    owner: root
    permissions: 0644
    encoding: "gz+b64"
    content: |
      {CA_KEY_OUTPUT}
  - path: /etc/ssl/ca.pem
    owner: root
    permissions: 0644
    encoding: "gz+b64"
    content: |
      {CA_OUTPUT}
  - path: /etc/kubernetes/kubeconfig.yaml
    owner: root
    permissions: 0644
    encoding: "gz+b64"
    content: |
      {KUBE_CONFIG_YAML_OUTPUT}
  - path: /etc/kubernetes/manifests/kube-proxy.yaml
    owner: root
    permissions: 0644
    encoding: "gz+b64"
    content: |
      {KUBE_PROXY_YAML_OUTPUT}
coreos:
  units:
    - name: flanneld.service
      drop-ins:
        - name: 50-network-config.conf
          content: |
            [Service]
            Requires=kraken-ssl.service
            After=kraken-ssl.service
            Environment="ETCD_SSL_DIR=/etc/etcd/ssl"
            ExecStartPre=/usr/bin/etcdctl -D ${DEFAULT_ETCD_SVC_NAME} \
              --cert-file /etc/etcd/ssl/client.pem --ca-file /etc/etcd/ssl/client-ca.pem --key-file /etc/etcd/ssl/client-key.pem \
              set /coreos.com/network/config '{ "Network": "${KUBERNETES_CIDR}" }'
            ExecStartPre=-/usr/bin/mkdir -p /opt/cni
            ExecStartPre=/usr/bin/wget -N -P /opt/cni https://storage.googleapis.com/kubernetes-release/network-plugins/cni-8a936732094c0941e1543ef5d292a1f4fffa1ac5.tar.gz
            ExecStartPre=/usr/bin/tar -xzf /opt/cni/cni-8a936732094c0941e1543ef5d292a1f4fffa1ac5.tar.gz -C /opt/cni/
            ExecStartPre=/usr/bin/rm /opt/cni/cni-8a936732094c0941e1543ef5d292a1f4fffa1ac5.tar.gz
      command: start
    - name: kraken-networking.service
      runtime: true
      command: start
      content: |
        [Unit]
        Description=Setup Network Environment
        Requires=network-online.target
        After=network-online.target
        [Service]
        RemainAfterExit=yes
        Type=oneshot
        ExecStart=/usr/bin/rkt run \
         --insecure-options=image \
         --net=host \
         --inherit-env=true \
         --volume etc,kind=host,source=/etc,readOnly=false \
         --mount volume=etc,target=/etc \
         quay.io/samsung_cnct/setup-network-environment:v1.0.1-mv
        ExecStopPost=/usr/bin/rkt gc --mark-only
    - name: kraken-ssl.service
      runtime: true
      command: start
      content: |
        [Unit]
        Description=Setup Network Environment
        Requires=kraken-networking.service
        After=kraken-networking.service
        [Service]
        EnvironmentFile=/etc/network-environment
        RemainAfterExit=yes
        Type=oneshot
        ExecStart=/usr/bin/rkt run \
         --insecure-options=image \
         --inherit-env=true \
         --volume input,kind=host,source=/etc/ssl,readOnly=true \
         --volume output,kind=host,source=/etc,readOnly=false \
         --mount volume=input,target=/input \
         --mount volume=output,target=/output \
         --set-env=HOST_IP=${DEFAULT_IPV4} \
         quay.io/samsung_cnct/drunkensmee:v0.2 \
         --exec /assets/generate_worker.sh
        ExecStopPost=/usr/bin/rkt gc --mark-only
    - name: format-docker.service
      command: start
      content: |
        [Unit]
        Description=Formats the ephemeral drive
        After=dev-xvdf.device
        Requires=dev-xvdf.device
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStartPre=/usr/sbin/wipefs -fa /dev/xvdf
        ExecStart=/usr/sbin/mkfs.ext4 /dev/xvdf
    - name: var-lib-docker.mount
      command: start
      content: |
        [Unit]
        Description=Mount docker to /var/lib/docker
        Requires=format-docker.service
        After=format-docker.service
        Before=early-docker.service
        Before=docker.service
        [Mount]
        What=/dev/xvdf
        Where=/var/lib/docker
        Type=ext4
    - name: docker.service
      drop-ins:
        - name: 10-wait-docker.conf
          content: |
            [Unit]
            After=var-lib-docker.mount
            Requires=var-lib-docker.mount
    - name: early-docker.service
      drop-ins:
        - name: 10-wait-early-docker.conf
          content: |
            [Unit]
            After=var-lib-docker.mount
            Requires=var-lib-docker.mount
    - name: kubelet.service
      command: start
      content: |
        [Unit]
        After=docker.service
        After=kraken-ssl.service
        Requires=docker.service
        Requires=kraken-ssl.service
        [Service]
        EnvironmentFile=/etc/network-environment
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/${KUBERNETES_VERSION}/bin/linux/amd64/kubelet
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kubelet
        ExecStart=/opt/bin/kubelet \
          --api_servers=${KUBERNETES_API_ENDPOINT} \
          --register-node=true \
          --allow-privileged=true \
          --config=/etc/kubernetes/manifests \
          --kubeconfig=/etc/kubernetes/kubeconfig.yaml \
          --hostname-override=${DEFAULT_IPV4} \
          --cluster-dns=${KUBERNETES_DNS_SERVICE} \
          --cluster-domain=${KUBERNETES_DNS_NAME} \
          --tls-cert-file=/etc/kubernetes/ssl/worker.pem \
          --tls-private-key-file=/etc/kubernetes/ssl/worker-key.pem \
          --cloud-provider=aws \
          --v=7 \
          --logtostderr=true
        Restart=always
        RestartSec=10
        [Install]
        WantedBy=multi-user.target
  flannel:
    etcd_endpoints: ${DEFAULT_ETCD_DNS_NAME}
    etcd_cafile: /etc/etcd/ssl/client-ca.pem
    etcd_certfile: /etc/etcd/ssl/client.pem
    etcd_keyfile: /etc/etcd/ssl/client-key.pem
  locksmith:
    endpoint: ${DEFAULT_ETCD_DNS_NAME}
    etcd_cafile: /etc/etcd/ssl/client-ca.pem
    etcd_certfile: /etc/etcd/ssl/client.pem
    etcd_keyfile: /etc/etcd/ssl/client-key.pem
  update:
    group: stable
    reboot-strategy: etcd-lock