---
- name: Run initial create for basic_auth user
  become: yes
  shell: >
    /opt/bin/kubectl config set-cluster {{ cluster_name }} --kubeconfig={{ kubernetes_cert_dir }}/{{ kubernetes_basic_auth_user.name }}/kubeconfig --server=https://{{ master_private_ip }} --certificate-authority={{ kubernetes_cert_dir }}/kube-ca.pem --embed-certs=true

- name: Run set context for basic_auth user
  become: yes
  shell: >
    /opt/bin/kubectl config set-context {{ cluster_name }} --kubeconfig={{ kubernetes_cert_dir }}/{{ kubernetes_basic_auth_user.name }}/kubeconfig --cluster={{ cluster_name }} --user={{ kubernetes_basic_auth_user.name }}

- name: Collect etcd key for basic_auth user
  shell: >
    etcdctl --endpoint "http://{{ etcd_private_ip }}:{{ etcd_port }}" get /{{ etcd_key }}/{{ kubernetes_basic_auth_user.name }}/basic-auth
  register: etcd_ba_result

- name: Run set credentials for basic_auth user
  become: yes
  shell: >
    /opt/bin/kubectl config set-credentials {{ kubernetes_basic_auth_user.name }} --kubeconfig={{ kubernetes_cert_dir }}/{{ kubernetes_basic_auth_user.name }}/kubeconfig --username={{ kubernetes_basic_auth_user.name }} --password={{ etcd_ba_result.stdout }}

- name: Run use context for basic_auth user
  become: yes
  shell: >
    /opt/bin/kubectl config use-context {{ cluster_name }} --kubeconfig={{ kubernetes_cert_dir }}/{{ kubernetes_basic_auth_user.name }}/kubeconfig
  with_dict: "{{ system_users }}"

- name: Run initial create for kube system users
  become: yes
  shell: >
    /opt/bin/kubectl config set-cluster {{ cluster_name }} --kubeconfig={{ kubernetes_cert_dir }}/{{ item.value.name }}/kubeconfig --server=https://{{ master_private_ip }} --certificate-authority={{ kubernetes_cert_dir }}/kube-ca.pem --embed-certs=true
  with_dict: "{{ system_users }}"

- name: Run set context for kube system users
  become: yes
  shell: >
    /opt/bin/kubectl config set-context {{ cluster_name }} --kubeconfig={{ kubernetes_cert_dir }}/{{ item.value.name }}/kubeconfig --cluster={{ cluster_name }} --user={{ item.value.name }}
  with_dict: "{{ system_users }}"

- name: Collect all tokens from etcd for system users
  shell: >
    etcdctl --endpoint "http://{{ etcd_private_ip }}:{{ etcd_port }}" get /{{ etcd_key }}/{{ item.value.name }}/token
  with_dict: "{{ system_users }}"
  register: etcd_results

- name: Create a new fact for system user name array
  become: yes
  set_fact: system_usernames="{{ lookup('template', 'get_usernames.jinja2').split(',') }}"

- name: Run set credentials for kube system users
  become: yes
  shell: >
    /opt/bin/kubectl config set-credentials {{ item.1 | regex_replace('\n', '') }} --kubeconfig={{ kubernetes_cert_dir }}/{{ item.1 | regex_replace('\n', '') }}/kubeconfig --token={{ item.0.stdout }}
  with_together:
    - "{{etcd_results.results}}"
    - "{{system_usernames}}"

- name: Run use context for kube system users
  become: yes
  shell: >
    /opt/bin/kubectl config use-context {{ cluster_name }} --kubeconfig={{ kubernetes_cert_dir }}/{{ item.value.name }}/kubeconfig
  with_dict: "{{ system_users }}"