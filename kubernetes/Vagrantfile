# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'fileutils'
require 'net/http'
require 'open-uri'
require 'ipaddr'

class Module
  def redefine_const(name, value)
    __send__(:remove_const, name) if const_defined?(name)
    const_set(name, value)
  end
end

# Cluster parameters
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
#-Local parameters=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
ETCD_MEM =  512
ETCD_CPUS = 1
MASTER_MEM =  512
MASTER_CPUS = 1
NODE_MEM= 1024
NODE_CPUS = 1
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

NETWORK = '172.16.1.0/24'
RUN_GUESTBOOK=true
CLOUD_PROVIDER = 'vagrant'
NUM_NODES = 3
DNS_DOMAIN='kubernetes.local'
ETCD_YAML = File.join(File.dirname(__FILE__), "../cloud_configs/etcd.yaml")
MASTER_YAML = File.join(File.dirname(__FILE__), "../cloud_configs/master.yaml")
NODE_YAML = File.join(File.dirname(__FILE__), "../cloud_configs/node.yaml")
KUBERNETES_VERSION = '0.15.0'
CHANNEL = 'alpha'
COREOS_VERSION = 'latest'
REBOOT_STRATEGY = 'off'
KUBECONFIG_TMPL = File.join(File.dirname(__FILE__), "../templates/kubeconfig.tmpl")
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

# Find the lastest stable release of kubernetes
if KUBERNETES_VERSION == "latest"
  txt = "https://storage.googleapis.com/kubernetes-release/release/stable.txt"
  Object.redefine_const(:KUBERNETES_VERSION,
    open(txt).read().gsub('v','').chomp)
  puts "\n" * 2 + ("+" * 61 + "\n") * 2 + "++++" + "\s" * 53 + "++++" + "\n"
  puts "+" * 12 + ">>    Kubernetes Version #{KUBERNETES_VERSION}    <<" + "+" * 12 + "\n"
  puts "++++" + "\s" * 53 + "++++" + "\n" + ("+" * 61 + "\n") * 2 + "\n" * 2
end

BASE_IP_ADDRESS = IPAddr.new(NETWORK).to_s.chomp("0")
ETCD_IP_ADDRESS=BASE_IP_ADDRESS + "#{1+100}"
MASTER_IP_ADDRESS=BASE_IP_ADDRESS + "#{2+100}"
NODE_01_PRIVATE_IP = BASE_IP_ADDRESS + "#{3+100}"

if RUN_GUESTBOOK
  EXAMPLE_STATE = "start"
else 
  EXAMPLE_STATE = "stop"
end

# Install all other plugins(gems)
required_plugins = %w(vagrant-triggers)
required_plugins.each do |plugin|
  need_restart = false
  unless Vagrant.has_plugin? plugin
    system "vagrant plugin install #{plugin}"
    need_restart = true
  end
  exec "vagrant #{ARGV.join(' ')}" if need_restart
end

upstream = "http://#{CHANNEL}.release.core-os.net/amd64-usr/#{COREOS_VERSION}"
if COREOS_VERSION == "latest"
  upstream = "http://#{CHANNEL}.release.core-os.net/amd64-usr/current"
  url = "#{upstream}/version.txt"
  Object.redefine_const(:COREOS_VERSION,
    open(url).read().scan(/COREOS_VERSION=.*/)[0].gsub('COREOS_VERSION=', ''))
end

SERIAL_LOGGING = (ENV['SERIAL_LOGGING'].to_s.downcase == 'true')
GUI = (ENV['GUI'].to_s.downcase == 'true')

Vagrant.require_version ">= 1.6.0"

(1..(NUM_NODES.to_i + 2)).each do |i|
  case i
  when 1
    hostname = "etcd"
  when 2
    hostname = "master"
  else
    hostname = "node-%02d" % (i - 2)
  end
end

Vagrant.configure(2) do |config|

  # always use Vagrants' insecure key
  config.ssh.insert_key = false
  config.ssh.forward_agent = true

  config.vm.box = "coreos-#{CHANNEL}"
  config.vm.box_version = "= #{COREOS_VERSION}"
  config.vm.box_url = "#{upstream}/coreos_production_vagrant.json"

  config.trigger.after [:up, :resume] do
    info "making sure ssh agent has the default vagrant key..."
    system "ssh-add ~/.vagrant.d/insecure_private_key"
  end

  # Getting landrush going
  # Disabled for now to support windows
  #config.landrush.enabled = true
  #config.landrush.tld = 'kube'
  #config.landrush.host 'sandy.mycluster.kube', '172.16.1.101'

  config.vm.provider :virtualbox do |v|
    # On VirtualBox, we don't have guest additions or a functional vboxsf
    # in CoreOS, so tell Vagrant that so it can be smarter.
    v.check_guest_additions = false
    v.functional_vboxsf     = false
  end
  config.vm.provider :parallels do |p|
    p.update_guest_tools = false
    p.check_guest_tools = false
  end

  # plugin conflict
  if Vagrant.has_plugin?("vagrant-vbguest") then
    config.vbguest.auto_update = false
  end

  (1..(NUM_NODES.to_i + 2)).each do |i|
    case i
    when 1
      hostname = "etcd"
      user_data = ETCD_YAML
      memory = ETCD_MEM
      cpus = ETCD_CPUS
    when 2
      hostname = "master"
      user_data = MASTER_YAML
      memory = MASTER_MEM
      cpus = MASTER_CPUS
    else      
      hostname = "node-%02d" % (i - 2)
      user_data = NODE_YAML
      memory = NODE_MEM
      cpus = NODE_CPUS
    end

    # Transform yaml files
    tmp_user_data = "/tmp/#{hostname}-vagrantfile-user-data"
    replacements = {
      '$ETCD_IP' => ETCD_IP_ADDRESS,
      '$MASTER_IP' => MASTER_IP_ADDRESS,
      '$KUBERNETES_VERSION' => 'v' + KUBERNETES_VERSION,
      '$REBOOT_STRATEGY' => REBOOT_STRATEGY,
      '$CLOUD_PROVIDER' => CLOUD_PROVIDER,
      '$DNS_DOMAIN' => DNS_DOMAIN,
      '$SERVICE_PUBLIC_IP' => NODE_01_PRIVATE_IP,
      '$RUN_EXAMPLES' => EXAMPLE_STATE
    }
    
    regexp = Regexp.new replacements.keys.map {|k| Regexp.quote(k) }.join('|')
    tmp_file = Tempfile.new("tmp_vagrantfile")
    
    begin
      File.foreach(user_data, "r") do |line|
        tmp_file.write line.gsub regexp, replacements
      end
      tmp_file.close
      FileUtils.mv(tmp_file.path, tmp_user_data)
    ensure
      tmp_file.close
      tmp_file.unlink
    end

    config.vm.define vm_name = hostname do |config2|
      config2.vm.hostname = vm_name

      if SERIAL_LOGGING
        logdir = File.join(File.dirname(__FILE__), "log")
        FileUtils.mkdir_p(logdir)

        serialFile = File.join(logdir, "#{vm_name}-serial.txt")
        FileUtils.touch(serialFile)

        config2.vm.provider :virtualbox do |vb, override|
          vb.customize ["modifyvm", :id, "--uart1", "0x3F8", "4"]
          vb.customize ["modifyvm", :id, "--uartmode1", serialFile]
        end
      end

      config2.vm.network :private_network, ip: BASE_IP_ADDRESS + "#{i+100}"

      if File.exist?(tmp_user_data)
        config2.vm.provision :file, :source => "#{tmp_user_data}", :destination => "/tmp/vagrantfile-user-data"
        config2.vm.provision :shell, :privileged => true, 
        inline: <<-EOF
          mv /tmp/vagrantfile-user-data /var/lib/coreos-vagrant/
        EOF
      end

      # Create .kubeconfig file
      kubeconfig_file = File.new(".kubeconfig", "w")
      kubeconfig_tmpl = KUBECONFIG_TMPL
      replacements = {
        '$MASTER_IP' => MASTER_IP_ADDRESS
      }

      regexp = Regexp.new replacements.keys.map {|k| Regexp.quote(k) }.join('|')

      File.foreach(kubeconfig_tmpl, "r") do |line|
        kubeconfig_file.write line.gsub regexp, replacements
      end

      kubeconfig_file.close
    end
  end
end
