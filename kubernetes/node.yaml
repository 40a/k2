#cloud-config

---
write_files:
- path: /opt/bin/wait4ectd.sh
  owner: root
  content: |
    #! /usr/bin/bash
    until curl http://127.0.0.1:4001/v2/machines; do sleep 2; done
- path: /opt/bin/wait4apiserver.sh
  owner: root
  content: |
    #! /usr/bin/bash
    until curl http://__MASTER_IP__:8080; do sleep 2; done
coreos:
  fleet:
    etcd-servers: http://$private_ipv4:2379
    public-ip: $public-ipv4
    metadata: "role=minion"
  flannel:
    interface: eth1
  units:
    - name: etcd.service
      command: start
      content: |
        Description=etcd 2.0 service
        After=docker.service

        [Service]
        EnvironmentFile=/etc/environment
        TimeoutStartSec=0
        SyslogIdentifier=writer_process
        #ExecStartPre=-/usr/bin/docker kill etcd
        #ExecStartPre=-/usr/bin/docker rm etcd
        ExecStartPre=/usr/bin/docker pull quay.io/coreos/etcd:latest
        ExecStart=/bin/bash -c "/usr/bin/docker run \
          -p 2379:2379 \
          -p 2380:2380 \
          --name etcd \
          -v /opt/etcd:/opt/etcd \
          -v /usr/share/ca-certificates/:/etc/ssl/certs \
          quay.io/coreos/etcd:latest \
          -data-dir /opt/etcd \
          -name %H \
          -listen-client-urls http://0.0.0.0:2379 \
          -advertise-client-urls http://__MASTER_IP__:2379 \
          -listen-peer-urls http://0.0.0.0:2380 \
          -initial-advertise-peer-urls http://__MASTER_IP__:2380 \
          -initial-cluster master=http://__MASTER_IP__:2380,node-02=http://172.16.1.102:2380,node-02=http://172.16.1.103:2380\
          -initial-cluster-state new"
        ExecStop=/usr/bin/docker kill etcd

        [X-Fleet]
        Conflicts=etcd*
    - name: fleet.service
      command: start
    - name: wait4ectd.service
      command: start
      content: |
        [Unit]
        Description=Wait for etcd to come up
        Wants=network-online.target
        After=network-online.target
        Before=flanneld.service

        [Service]
        ExecStartPre=/usr/bin/chmod +x /opt/bin/wait4ectd.sh
        ExecStart=/usr/bin/bash /opt/bin/wait4ectd.sh
        RemainAfterExit=true
        Type=oneshot
    - name: wait4apiserver.service
      command: start
      content: |
        [Unit]
        Description=Wait for kube-apiserver to come up
        Requires=network-online.target
        After=network-online.target

        [Service]
        ExecStartPre=/usr/bin/chmod +x /opt/bin/wait4apiserver.sh
        ExecStart=/usr/bin/bash /opt/bin/wait4apiserver.sh
        RemainAfterExit=true
        Type=oneshot
    - name: setup-network-environment.service
      command: start
      content: |
        [Unit]
        Description=Setup Network Environment
        Documentation=https://github.com/kelseyhightower/setup-network-environment
        Requires=network-online.target
        After=network-online.target

        [Service]
        ExecStartPre=-/usr/bin/mkdir -p /opt/bin
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/k8s/setup-network-environment 
        ExecStartPre=/usr/bin/chmod +x /opt/bin/setup-network-environment
        ExecStart=/opt/bin/setup-network-environment
        RemainAfterExit=yes
        Type=oneshot 
    - name: flanneld.service
      command: start
      drop-ins:
        - name: 50-network-config.conf
          content: |
            [Unit]
            Requires=etcd.service
            [Service]
            ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config '{"Network":"10.244.0.0/16", "Backend": {"Type": "vxlan"}}'
    - name: docker.service
      command: start
      drop-ins:
        - name: 51-docker-mirror.conf
          content: |
            [Unit]
            # making sure that flanneld finished startup, otherwise containers
            # won't land in flannel's network...
            Requires=flanneld.service
            After=flanneld.service
            [Service]
            Environment=DOCKER_OPTS='--registry-mirror=http://__MASTER_IP__:5000'
    - name: kube-proxy.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Proxy
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=setup-network-environment.service
        After=setup-network-environment.service

        [Service]
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/__RELEASE__/bin/linux/amd64/kube-proxy
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-proxy 
        ExecStart=/opt/bin/kube-proxy \
        --master=__MASTER_IP__:8080 \
        --logtostderr=true
        Restart=always
        RestartSec=10
    - name: kube-kubelet.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Kubelet
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=setup-network-environment.service
        After=setup-network-environment.service

        [Service]
        EnvironmentFile=/etc/network-environment
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/__RELEASE__/bin/linux/amd64/kubelet
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kubelet
        ExecStart=/opt/bin/kubelet \
        --address=0.0.0.0 \
        --port=10250 \
        --hostname_override=$private_ipv4 \
        --api_servers=__MASTER_IP__:8080 \
        --logtostderr=true
        Restart=always
        RestartSec=10
  update:
    group: alpha
    reboot-strategy: off