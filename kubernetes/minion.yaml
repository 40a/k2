#cloud-config

---
write_files:
- path: /opt/bin/wait4etcd.sh
  owner: root
  content: |
    #! /usr/bin/bash
    until curl http://__ETCD_IP__:4001/v2/machines; do sleep 2; done
- path: /opt/bin/wait4ectdproxy.sh
  owner: root
  content: |
    #! /usr/bin/bash
    until curl http://127.0.0.1:4001/v2/machines; do sleep 2; done
- path: /opt/bin/wait4apiserver.sh
  owner: root
  content: |
    #! /usr/bin/bash
    until curl http://__MASTER_IP__:8080; do sleep 2; done
coreos:
  fleet:
    etcd-servers: http://$private_ipv4:4001
    public-ip: $private_ipv4
    metadata: "role=minion"
  flannel:
    etcd-endpoints: http://__ETCD_IP__:4001
    interface: $private_ipv4
  units:
    - name: wait4etcd.service
      command: start
      content: |
        [Unit]
        Description=Wait for etcd to come up
        Wants=network-online.target
        After=network-online.target
        Before=flannel.service
        [Service]
        ExecStartPre=/usr/bin/chmod +x /opt/bin/wait4etcd.sh
        ExecStart=/usr/bin/bash /opt/bin/wait4etcd.sh
        RemainAfterExit=true
        Type=oneshot
    - name: setup-network-environment.service
      command: start
      content: |
        [Unit]
        Description=Setup Network Environment
        Documentation=https://github.com/kelseyhightower/setup-network-environment
        Requires=network-online.target
        After=network-online.target
        Before=flanneld.service

        [Service]
        ExecStartPre=-/usr/bin/mkdir -p /opt/bin
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/k8s/setup-network-environment 
        ExecStartPre=/usr/bin/chmod +x /opt/bin/setup-network-environment
        ExecStart=/opt/bin/setup-network-environment
        RemainAfterExit=yes
        Type=oneshot
    - name: flanneld.service
      command: start
      drop-ins:
        - name: 50-network-config.conf
          content: |
            [Unit]
            Requires=wait4etcd.service
            After=wait4etcd.service
            Before=docker.service
    - name: docker-cache.service
      command: start
      content: |
        [Unit]
        Description=Docker cache proxy
        Requires=early-docker.service
        After=early-docker.service
        Before=early-docker.target

        [Service]
        Environment="TMPDIR=/var/tmp/"
        Environment="DOCKER_HOST=unix:///var/run/early-docker.sock"
        ExecStartPre=-/usr/bin/docker kill docker-registry
        ExecStartPre=-/usr/bin/docker rm docker-registry
        ExecStartPre=/usr/bin/docker pull quay.io/devops/docker-registry:latest
        # GUNICORN_OPTS is an workaround for
        # https://github.com/docker/docker-registry/issues/892
        ExecStart=/usr/bin/docker run --rm --net host --name docker-registry \
            -e STANDALONE=false \
            -e GUNICORN_OPTS=[--preload] \
            -e MIRROR_SOURCE=https://registry-1.docker.io \
            -e MIRROR_SOURCE_INDEX=https://index.docker.io \
            -e MIRROR_TAGS_CACHE_TTL=1800 \
            quay.io/devops/docker-registry:latest
        Restart=always
        TimeoutStartSec=0
        RestartSec=5
    - name: docker.service
      drop-ins:
        - name: 51-docker-mirror.conf
          content: |
            [Unit]
            # making sure that docker-cache is up and that flanneld finished
            # startup, otherwise containers won't land in flannel's network...
            Requires=docker-cache.service flanneld.service
            After=docker-cache.service flanneld.service

            [Service]
            Environment=DOCKER_OPTS='--registry-mirror=http://$private_ipv4:5000'
    - name: etcd.service
      command: start
      content: |
        [Unit]
        Description=etcd 2.0 proxy service
        Requires=docker.service
        After=docker.service
        Before=fleet.service

        [Service]
        EnvironmentFile=/etc/environment
        SyslogIdentifier=writer_process
        ExecStartPre=/usr/bin/docker pull quay.io/coreos/etcd:__ETCD_VERSION__
        ExecStart=/bin/bash -c "/usr/bin/docker run \
          -p 4001:4001 \
          -p 2380:2380 \
          -p 2379:2379 \
          --name etcd \
          quay.io/coreos/etcd:__ETCD_VERSION__ \
          -proxy on \
          -listen-client-urls http://0.0.0.0:4001 \
          -initial-cluster etcd-node=http://__ETCD_IP__:2380"
        ExecStop=/usr/bin/docker kill etcd-proxy
        Restart=always
        RestartSec=10
        TimeoutStartSec=0
    - name: wait4ectdproxy.service
      command: start
      content: |
        [Unit]
        Description=Wait for etcd proxy to come up
        Wants=network-online.target
        After=network-online.target
        Before=etcd.service

        [Service]
        ExecStartPre=/usr/bin/chmod +x /opt/bin/wait4ectdproxy.sh
        ExecStart=/usr/bin/bash /opt/bin/wait4ectdproxy.sh
        RemainAfterExit=true
        Type=oneshot
    - name: fleet.service
      command: start
    - name: wait4apiserver.service
      command: start
      content: |
        [Unit]
        Description=Wait for etcd proxy to come up
        Wants=network-online.target
        After=network-online.target

        [Service]
        ExecStartPre=/usr/bin/chmod +x /opt/bin/wait4apiserver.sh
        ExecStart=/usr/bin/bash /opt/bin/wait4apiserver.sh
        RemainAfterExit=true
        Type=oneshot
    - name: kube-proxy.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Proxy
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=wait4apiserver.service
        After=wait4apiserver.service

        [Service]
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/__KUBE_VERSION__/bin/linux/amd64/kube-proxy
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-proxy
        ExecStart=/opt/bin/kube-proxy \
        --master=__MASTER_IP__:8080 \
        --logtostderr=true
        Restart=always
        RestartSec=10
    - name: kube-kubelet.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Kubelet
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=wait4apiserver.service
        After=wait4apiserver.service

        [Service]
        EnvironmentFile=/etc/network-environment
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/__KUBE_VERSION__/bin/linux/amd64/kubelet
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kubelet
        ExecStart=/opt/bin/kubelet \
        --address=0.0.0.0 \
        --port=10250 \
        --hostname_override=$public_ipv4 \
        --api_servers=__MASTER_IP__:8080 \
        --logtostderr=true
        Restart=always
        RestartSec=10
  update:
    group: alpha
    reboot-strategy: __REBOOT_STRAT__