#!/usr/bin/env ruby
abort 'This tool requires ruby 2.x.x or above!' unless RUBY_VERSION.split('.')[0].to_i >= 2

require 'gli'
require 'mkmf'
require 'fileutils'
require 'yaml'
require 'ipaddr'

# Make the MakeMakefile logger write file output to null.
# Supress output from find_executable
# Requires ruby >= 2.0.0
module MakeMakefile::Logging
  @logfile = File::NULL
end
module MakeMakefile
  def message(*s) end
end

include GLI::App

# GLI data setup
program_desc 'Helper tool for interacting with kraken kubernetes cluster'
version '1.0'
subcommand_option_handling :normal
arguments :strict
sort_help :manually

CLUSTERS_PATH = ENV.fetch('KRAKEN_CLUSTERS_PATH', File.join(__dir__, 'clusters'))
CLUSTERS = Dir.entries(CLUSTERS_PATH)
              .reject { |x| x =~ /^\.\.?$/ }
              .map { |x| [x, File.join(CLUSTERS_PATH, x)] }.to_h
              .select { |_, v| File.directory?(v) }

CLUSTERS.each do |cluster, cluster_path|
  desc "Work with '#{cluster}' cluster"
  arg 'vagrant_command', :multiple
  long_desc "Send vagrant commands to '#{cluster}' cluster. For example:

  ./kraken #{cluster} up

  ./kraken #{cluster} destroy

  ./kraken #{cluster} ssh master
  "
  command cluster.to_sym do |cluster_command|
    if cluster == 'local'
      cluster_command.desc "run unit tests on each VM immediately after it boots up."
      cluster_command.switch :unittest, :negatable => false, :default_value => false
    end
    cluster_command.action do |global_options,options,args|
      env_vars = "KRAKEN_CLUSTER='#{cluster}' "\
        "VAGRANT_DOTFILE_PATH='#{cluster_path}' "\
        "VAGRANT_CWD='#{__dir__}'"

      if options[:unittest]
        env_vars += " KRAKEN_UNITTEST=true"
      end

      command_str = "#{env_vars} vagrant #{args.join(' ')}"

      puts "# executing: #{command_str}"
      system(command_str)
    end
  end
end

desc "run integration tests on a cluster"
arg 'cluster'
long_desc "Run cucumber tests on a cluster. For example:

./kraken test local

./kraken test aws
"
command :test do |test_command|
  test_command.action do |global_options,options,args|
    cluster = args[0]
    settings_yaml = File.join(CLUSTERS_PATH, cluster, 'settings.yaml')
    raise "#{settings_yaml} not found. You need to create it!" unless File.exist?(settings_yaml)

    settings = YAML.load_file(settings_yaml)
    kube_master = case cluster
                  when 'aws'
                    settings['aws']['masterHostName'] || settings['aws']['masterPublicIp']
                  else
                    network = settings['cluster']['network'] || '172.16.1.0/24'
                    IPAddr.new(network).to_s.chomp("0") + "#{2+100}"
                  end

    kube_set_cluster_cmd = "kubectl config set-cluster #{cluster}"\
      " --server=http://#{kube_master}:8080"\
      " --api-version=#{settings['cluster']['apiVersion']}"

    cucumber_cmd = "cucumber #{File.join(__dir__, '..', 'features', "*_#{cluster}.feature")}"

    command_str = "#{kube_set_cluster_cmd}; #{cucumber_cmd}"

    puts "# executing: #{command_str}"
    system(command_str)
    unless $?.success?
      system("ERROR: tests failed, displaying journalctl output from master")
      blacklist_regexes = %w(handlers.go motd OpenSSH sshd)
      blacklist_grep_cmd = blacklist_regexes.map { |x| "grep -v #{x}" }.join(" \| ")
      run("#{cluster} ssh master -c \' journalctl --no-pager \| #{blacklist_grep_cmd} \'".split(' '))
    end
  end
end

pre do |global,command,options,args|
  %w(vagrant kubectl).each do |tool|
    raise "ERROR: required tool '#{tool}' not found or not executable" if find_executable(tool).nil?
  end
  true
end

exit run(ARGV)
