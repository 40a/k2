#!/usr/bin/env ruby
abort 'This tool requires ruby 2.x.x or above!' unless RUBY_VERSION.split('.')[0].to_i >= 2

require 'gli'
require 'mkmf'
require 'fileutils'
require 'yaml'
require 'ipaddr'

# Make the MakeMakefile logger write file output to null.
# Probably requires ruby >= 1.9.3
module MakeMakefile::Logging
  @logfile = File::NULL
end

include GLI::App

# GLI data setup
program_desc 'Helper tool for interacting with kraken kubernetes cluster'
version '1.0'
subcommand_option_handling :normal
arguments :strict
sort_help :manually

Dir.entries(File.expand_path(File.dirname(__FILE__))).select do |f| 
  if File.directory?(File.join(File.expand_path(File.dirname(__FILE__)), f)) and !f.start_with?('.')
    
    desc "Work with #{f} cluster"
    arg 'vagrant_command', :multiple
    long_desc "Send vagrant commands to #{f} cluster. For example:

    ./kraken #{f} up

    ./kraken #{f} destroy

    ./kraken #{f} ssh master
    "
    command f.to_sym do |cluster_command|
      if f == 'local'
        cluster_command.desc "run unit tests on each VM immediately after it boots up."
        cluster_command.switch :unittest, :negatable => false, :default_value => false 
      end
      cluster_command.action do |global_options,options,args|
        command_str = "KRAKEN_CLUSTER='#{f}' "\
                      "VAGRANT_DOTFILE_PATH='#{File.join(File.expand_path(File.dirname(__FILE__)), f)}' "\
                      "VAGRANT_CWD='#{File.join(File.expand_path(File.dirname(__FILE__)))}'"

        if options[:unittest]
          command_str += " KRAKEN_UNITTEST=true"
        end

        puts "Executing: #{command_str} vagrant #{args.join(' ')}"
        exec "#{command_str} vagrant #{args.join(' ')}"
      end
    end
  end
end

desc "run integration tests on a cluster"
arg 'cluster'
long_desc "Run cucumber tests on a cluster. For example:

./kraken test local

./kraken test aws
"
skips_pre
command :test do |test_command|
  test_command.action do |global_options,options,args|
    raise 'Please make sure kubectl is installed' if find_executable('kubectl').nil?
    settings_yaml = File.expand_path(File.join(File.dirname(__FILE__), '.', args[0], 'settings.yaml'))
    raise "#{settings_yaml} not found. You need to create it!" unless File.exist?(settings_yaml)
    
    settings = YAML.load_file(settings_yaml)
    command_str = "kubectl config set-cluster #{args[0]} --server=http://"
    if args[0] == 'aws'
      aws_master = settings['aws']['masterHostName'] || settings['aws']['masterPublicIp']
      command_str += "#{aws_master}:8080 "
    else
      network = settings['cluster']['network'] || '172.16.1.0/24'
      ip = IPAddr.new(network).to_s.chomp("0") + "#{2+100}"
      command_str += "#{ip}:8080 "
    end

    command_str += "--api-version=#{settings['cluster']['apiVersion']}"
    puts 'Creating kubeconfig file and running tests'
    exec command_str + '; ' + "cucumber #{File.expand_path(File.join(File.dirname(__FILE__), '..', 'features', "*_#{args[0]}.feature"))}"

  end
end

pre do |global,command,options,args|
  raise 'Please make sure Vagrant is installed' if find_executable('vagrant').nil?
  true
end

exit run(ARGV)