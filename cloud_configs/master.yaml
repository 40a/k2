#cloud-config

---
write_files:
- path: /opt/bin/download-deploy-kube-srv.sh
  owner: root
  content: |
    #! /usr/bin/bash
    /usr/bin/wget https://github.com/l337ch/deploy-kube-srv/archive/v0.1.0.tar.gz -O - | tar -xz -C /opt/bin
- path: /opt/bin/wait4etcd.sh
  owner: root
  content: |
    #! /usr/bin/bash
    until curl http://$ETCD_IP:4001/v2/machines; do sleep 2; done
- path: /opt/bin/wait4ectdproxy.sh
  owner: root
  content: |
    #! /usr/bin/bash
    until curl http://127.0.0.1:4001/v2/machines; do sleep 2; done
- path: /opt/bin/wait4finalnode.sh
  owner: root
  content: |
    #! /usr/bin/bash
    until curl http://$FINAL_NODE:10255/stats/; do sleep 2; done
- path: /opt/bin/wait4dns.sh
  owner: root
  content: |
    #! /usr/bin/bash
    until 
- path: /opt/bin/flannelconfig.sh
  owner: root
  content: |
    #! /usr/bin/bash
    /usr/bin/etcdctl set /coreos.com/network/config '{"Network":"10.244.0.0/16", "Backend": {"Type": "vxlan"}}' 
- path: /opt/bin/kube2sky.sh
  owner: root
  content: |
    #! /usr/bin/bash
    /opt/bin/kubectl create -f /opt/bin/deploy-kube-srv-0.1.0/skydns/
- path: /opt/bin/guestbook_example.sh
  owner: root
  content: |
    #! /usr/bin/bash
    sed -i -- 's,$SERVICE_IP,$SERVICE_PUBLIC_IP,g' /opt/bin/deploy-kube-srv-0.1.0/guestbook/frontend-service.json
    /opt/bin/kubectl create -f /opt/bin/deploy-kube-srv-0.1.0/guestbook/
- path: /opt/bin/influxdb_grafana.sh
  owner: root
  content: |
    #! /usr/bin/bash
    sed -i -- 's,$NODE_01_IP,$NODE_01_PRIVATE_IP,g' /opt/bin/deploy-kube-srv-0.1.0/influxdb-grafana/grafana-service.json
    sed -i -- 's,$NODE_01_IP,$NODE_01_PRIVATE_IP,g' /opt/bin/deploy-kube-srv-0.1.0/influxdb-grafana/heapster-service.json
    sed -i -- 's,$NODE_01_IP,$NODE_01_PRIVATE_IP,g' /opt/bin/deploy-kube-srv-0.1.0/influxdb-grafana/influxdb-service.json
    sed -i -- 's,$NODE_01_IP,$NODE_01_PRIVATE_IP,g' /opt/bin/deploy-kube-srv-0.1.0/influxdb-grafana/influxdb-ui-service.json
    sed -i -- 's,$NODE_01_IP,$NODE_01_PUBLIC_IP,g' /opt/bin/deploy-kube-srv-0.1.0/influxdb-grafana/influxdb-grafana-controller.json
    /opt/bin/kubectl --server=http://$MASTER_IP:8080 create -f /opt/bin/deploy-kube-srv-0.1.0/influxdb-grafana/
- path: /opt/bin/influxdb-grafana-pause.sh
  owner: root
  content: |
    #! /usr/bin/bash
    sleep 180
coreos:
  ssh_authorized_keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC+ORTPzSHSlzoGd7tJzNc5XdVAu6sv1lxe5830OqO+Y2FkUZQrzjov5azCTKHxVTC+UZsyYPRjk/qTHwMiFVdS2Na3pCTCfGJEJf+4A9khKRjWRFQ0vu8Qyk7baQ5UlZCbwkg0lSIl++NQudZoFFis/T6Lujg3p7+9SIoEJQXFi07WkRaDcHWmsufS6Rd/CCeIGPI8/JW8CtdKs/8kCxnW6ipzl3nK8RohbOYYAtzfEkTY/AxaHHAd9dcclp8ffQSMvLj0SxANMBB5vIIeM+XtFwnkUz7u6IfWv6SqgeSLIMO+iQ1pdf5Rl+cHc28fY2rXfw/AQHaSY5nvZrg11RnqAJj69mjVLty1wwotqnNkQEVsXlYh64YzPbcMk+NGagoICDbm+vzuDht8Xn9skTHjRece6dOf0/QGHoMGK9ttLh+bOZJTK+bXBFP8e4jjxzkQvgTCHKbJXXPt1WOeeKVGnHvFchvH6TIkqQwrTaNaPpmPhM6uqear6cKBJhxY/Laq5tQX6DB2ypQDvFS0z4PFOJTTPJ9dyvMRa2wNzjPk9EFC9+huex0rP9u2j/8a4DJOqH9pvI3Ciu0Cexk3kOJaess64kUft8ULzIPpunKyM1D4KhfbvxwwiPx4aMqxwNwLFX8CEG4Lsx1YMqkJAqb42+MNXnU0gb/xJRAZP6rrUQ== maratoid+samsungjenkins@gmail.com
  etcd2:
    proxy: on
    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
    initial-cluster: etcd=http://$ETCD_IP:2380
  fleet:
    etcd-servers: http://$private_ipv4:4001
    public-ip: $public_ipv4
    metadata: "role=master"
  flannel:
    etcd-endpoints: http://$ETCD_IP:4001
    interface: $private_ipv4
  units:
    - name: docker-tcp.socket
      command: start
      enable: true
      content: |
        [Unit]
        Description=Docker TCP Socket for the API

        [Socket]
        ListenStream=0.0.0.0:4243
        BindIPv6Only=both
        Service=docker.service

        [Install]
        WantedBy=sockets.target
    - name: wait4etcd.service
      command: start
      content: |
        [Unit]
        Description=Wait for etcd to come up
        Requires=network-online.target
        After=network-online.target
        Before=flannel.service

        [Service]
        ExecStartPre=/usr/bin/chmod +x /opt/bin/wait4etcd.sh
        ExecStart=/usr/bin/bash /opt/bin/wait4etcd.sh
        RemainAfterExit=true
        Type=oneshot
    - name: etcd2.service
      command: start
    - name: setup-network-environment.service
      command: start
      content: |
        [Unit]
        Description=Setup Network Environment
        Documentation=https://github.com/kelseyhightower/setup-network-environment
        Requires=network-online.target
        After=network-online.target
        Before=flanneld.service

        [Service]
        ExecStartPre=-/usr/bin/mkdir -p /opt/bin
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://github.com/kelseyhightower/setup-network-environment/releases/download/v1.0.0/setup-network-environment
        ExecStartPre=/usr/bin/chmod +x /opt/bin/setup-network-environment
        ExecStart=/opt/bin/setup-network-environment
        RemainAfterExit=yes
        Type=oneshot
    - name: wait4ectdproxy.service
      command: start
      content: |
        [Unit]
        Description=Wait for etcd proxy to come up
        requires=etcd2.service
        After=etcd2.service
        Before=flannelconfig.service

        [Service]
        ExecStartPre=/usr/bin/chmod +x /opt/bin/wait4ectdproxy.sh
        ExecStart=/usr/bin/bash /opt/bin/wait4ectdproxy.sh
        RemainAfterExit=true
        Type=oneshot
    - name: flannelconfig.service
      command: start
      content: |
        [Unit]
        Description=write flannel network to etcd
        After=wait4ectdproxy.service

        [Service]
        ExecStartPre=/usr/bin/chmod +x /opt/bin/flannelconfig.sh
        ExecStart=/usr/bin/bash /opt/bin/flannelconfig.sh
        RemainAfterExit=true
        Type=oneshot
    - name: flanneld.service
      command: start
      drop-ins:
        - name: 50-network-config.conf
          content: |
            [Unit]
            After=flannelconfig.service
            Before=docker.service
    - name: docker.service
      drop-ins:
        - name: 51-docker-flannel.conf
          content: |
            [Unit]
            # startup, otherwise containers won't land in flannel's network...
            Requires=flanneld.service
            After=flanneld.service

            [Service]
            Environment=DOCKER_OPTS='--registry-mirror=http://$DOCKER_CACHE:5000'
    - name: fleet.service
      command: start
    - name: kube-apiserver.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes API Server
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        After=wait4ectdproxy.service

        [Service]
        ExecStartPre=-/usr/bin/mkdir -p /opt/bin
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/$KUBERNETES_VERSION/bin/linux/amd64/kube-apiserver
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-apiserver
        ExecStart=/opt/bin/kube-apiserver \
        --insecure_bind_address=0.0.0.0 \
        --insecure_port=8080 \
        --portal_net=10.100.0.0/16 \
        --etcd_servers=http://127.0.0.1:4001 \
        --public_address_override=$private_ipv4 \
        --logtostderr=true \
        --cors_allowed_origins=.* \
        --runtime_config=api/v1beta3
        Restart=always
        RestartSec=10
    - name: kube-controller-manager.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Controller Manager
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=kube-apiserver.service
        After=kube-apiserver.service

        [Service]
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/$KUBERNETES_VERSION/bin/linux/amd64/kube-controller-manager
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-controller-manager
        ExecStart=/opt/bin/kube-controller-manager \
        --master=$private_ipv4:8080 \
        --pod_eviction_timeout=1m \
        --resource_quota_sync_period=20s \
        --logtostderr=true
        Restart=always
        RestartSec=10
    - name: kube-scheduler.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Scheduler
        Documentation=https://github.com/GoogleCloudPlatform/kubernetes
        Requires=kube-apiserver.service
        After=kube-apiserver.service

        [Service]
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/$KUBERNETES_VERSION/bin/linux/amd64/kube-scheduler
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-scheduler
        ExecStart=/opt/bin/kube-scheduler --master=$private_ipv4:8080
        Restart=always
        RestartSec=10
    - name: kube-register.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Registration Service
        Documentation=https://github.com/kelseyhightower/kube-register
        Requires=kube-apiserver.service
        After=kube-apiserver.service

        [Service]
        ExecStartPre=/usr/bin/wget -O /opt/bin/kube-register \
          https://github.com/kelseyhightower/kube-register/releases/download/v0.0.3/kube-register-0.0.3-linux-amd64
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-register
        ExecStart=/opt/bin/kube-register \
        --metadata=role=node \
        --fleet-endpoint=unix:///var/run/fleet.sock \
        --api-endpoint=http://$private_ipv4:8080 \
        --healthz-port=10254
        Restart=always
        RestartSec=10
    - name: wait4finalnode.service
      command: start
      content: |
        [Unit]
        Description=Wait for final node to come up
        Wants=kube-register.service
        After=kube-register.service
        Before=kube-skydns.service

        [Service]
        ExecStartPre=/usr/bin/chmod +x /opt/bin/wait4finalnode.sh
        ExecStart=/usr/bin/bash /opt/bin/wait4finalnode.sh
        RemainAfterExit=true
        Type=oneshot
    - name: download-deploy-kube-srv.service
      command: start
      content: |
        [Unit]
        Description=Download deploy-kube-srv
        Requires=wait4finalnode.service
        After=wait4finalnode.service

        [Service]
        TimeoutStartSec=0
        ExecStartPre=-/usr/bin/bash /opt/bin/download-deploy-kube-srv.sh
        ExecStartPre=/usr/bin/cp /opt/bin/deploy-kube-srv-0.1.0/bin/linux/kubectl /opt/bin/
        ExecStart=/usr/bin/chmod +x /opt/bin/kubectl
        RemainAfterExit=true
        Type=oneshot
    - name: kube-skydns.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes local DNS service
        Requires=download-deploy-kube-srv.service
        After=download-deploy-kube-srv.service

        [Service]
        TimeoutStartSec=0
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube2sky.sh
        ExecStart=/usr/bin/bash /opt/bin/kube2sky.sh
        RemainAfterExit=true
        Type=oneshot
    - name: guestbook-example.service
      command: $RUN_EXAMPLES
      content: |
        [Unit]
        Description=Kubernetes guestbook example
        Requires=kube-skydns.service
        After=kube-skydns.service
        
        [Service]
        TimeoutStartSec=0
        ExecStartPre=/usr/bin/chmod +x /opt/bin/guestbook_example.sh
        ExecStart=/usr/bin/bash /opt/bin/guestbook_example.sh
        RemainAfterExit=true
        Type=oneshot
    - name: influxdb-grafana-pause.service
      command: start
      content: |
        [Unit]
        Description=Wait for kube-skydns service
        Requires=kube-skydns.service
        After=kube-skydns.service

        [Service]
        ExecStartPre=/usr/bin/chmod +x /opt/bin/influxdb-grafana-pause.sh
        ExecStart=/usr/bin/bash /opt/bin/influxdb-grafana-pause.sh
        RemainAfterExit=true
        Type=oneshot
    - name: influxdb-grafana.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes influxdb-grafana service
        Requires=influxdb-grafana-pause.service
        After=influxdb-grafana-pause.service
        
        [Service]
        TimeoutStartSec=0
        ExecStartPre=-/usr/bin/chmod +x /opt/bin/influxdb_grafana.sh
        ExecStart=/usr/bin/bash /opt/bin/influxdb_grafana.sh
        RemainAfterExit=true
        Type=oneshot
  update:
    group: alpha
    reboot-strategy: $REBOOT_STRATEGY