# SSH tunneling fun
# Rename this file to ~/.ssh/config
# Be sure and change the IdentityFile to the location of 
# key you are using for each network

# Some basic SSH global niceties
ForwardAgent yes
# Keep connection alive for 10 mins even if network blips
TCPKeepAlive no
ServerAliveInterval 60
ServerAliveCountMax 10

# This is the gateway
Host kube-ssh-proxy
  Hostname 52.5.55.15
  IdentityFile ~/.ssh/keys/kubernete-demo.pem
  StrictHostKeyCHecking no
  UserKnownHostsFile /dev/null
  User core
  HashKnownHosts no

# Kubernetes development cluster on AWS
Host 10.1.1.*
  ProxyCommand ssh kube-ssh-proxy -W %h:%p
  StrictHostKeyCHecking no
  IdentityFile ~/.ssh/keys/kubernete-demo.pem
  StrictHostKeyCHecking no
  UserKnownHostsFile /dev/null
  User core
  HashKnownHosts no

# Local vagrant cluster from kraken
# This assumes that the vagrant generated IdentityFile is in the default vagrant install 
# location. If not you will need to update it
Host etcd
  HostName 172.16.1.101
  StrictHostKeyCHecking no
  IdentityFile ~/.vagrant.d/insecure_private_key
  UserKnownHostsFile /dev/null
  IdentitiesOnly yes
  User core
  HashKnownHosts no

Host master
  HostName 172.16.1.102
  StrictHostKeyCHecking no
  IdentityFile ~/.vagrant.d/insecure_private_key
  UserKnownHostsFile /dev/null
  IdentitiesOnly yes
  User core
  HashKnownHosts no

Host node-01
  HostName 172.16.1.103
  StrictHostKeyCHecking no
  IdentityFile ~/.vagrant.d/insecure_private_key
  UserKnownHostsFile /dev/null
  IdentitiesOnly yes
  User core
  HashKnownHosts no

Host node-02
  HostName 172.16.1.104
  StrictHostKeyCHecking no
  IdentityFile ~/.vagrant.d/insecure_private_key
  UserKnownHostsFile /dev/null
  IdentitiesOnly yes
  User core
  HashKnownHosts no